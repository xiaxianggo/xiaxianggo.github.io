<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xia.Blog()</title>
  
  <subtitle>Stay Hungry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-08T09:38:37.518Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xia Xiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无锡</title>
    <link href="http://yoursite.com/2018/09/08/%E6%97%A0%E9%94%A1/"/>
    <id>http://yoursite.com/2018/09/08/无锡/</id>
    <published>2018-09-08T09:37:01.000Z</published>
    <updated>2018-09-08T09:38:37.518Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA ClassLoader</title>
    <link href="http://yoursite.com/2018/08/08/JAVA-classloader/"/>
    <id>http://yoursite.com/2018/08/08/JAVA-classloader/</id>
    <published>2018-08-08T04:53:41.000Z</published>
    <updated>2018-09-09T08:42:55.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载器的基本概念"><a href="#类加载器的基本概念" class="headerlink" title="类加载器的基本概念"></a>类加载器的基本概念</h2><p>顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例。<br><a id="more"></a></p><h2 id="ClassLoader-介绍"><a href="#ClassLoader-介绍" class="headerlink" title="ClassLoader 介绍"></a>ClassLoader 介绍</h2><p>java.lang.ClassLoader类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class类的一个实例。除此之外，ClassLoader还负责加载 Java 应用所需的资源，如图像文件和配置文件等。不过本文只讨论其加载类的功能。为了完成加载类的这个职责，ClassLoader提供了一系列的方法</p><h2 id="ClassLoader-中与加载类相关的方法"><a href="#ClassLoader-中与加载类相关的方法" class="headerlink" title="ClassLoader 中与加载类相关的方法"></a>ClassLoader 中与加载类相关的方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的父类加载器。</td></tr><tr><td>loadClass(String name)</td><td>查找名称为 name的类，返回的结果是 java.lang.Class类的实例.</td></tr><tr><td>findLoadedClass(String name)</td><td>查找名称为 name的已经被加载过的类，返回的结果是 java.lang.Class类的实例。</td></tr><tr><td>defineClass(String name, byte<a href=""></a> b, int off, int len)</td><td>把字节数组 b中的内容转换成 Java 类，返回的结果是 java.lang.Class类的实例。这个方法被声明为 final的。</td></tr></tbody></table><h2 id="类加载器的树状组织结构"><a href="#类加载器的树状组织结构" class="headerlink" title="类加载器的树状组织结构"></a>类加载器的树状组织结构</h2><p>Java 中的类加载器大致可以分成两类，一类是系统提供的，另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：</p><ul><li>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自 java.lang.ClassLoader。</li><li>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li><li>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 <code>ClassLoader.getSystemClassLoader()</code>来获取它。</li></ul><p> 除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。<br>除了引导类加载器之外，所有的类加载器都有一个父类加载器。通过 表 1中给出的 getParent()方法可以得到。对于系统提供的类加载器来说，系统类加载器的父类加载器是扩展类加载器，而扩展类加载器的父类加载器是引导类加载器；对于开发人员编写的类加载器来说，其父类加载器是加载此类加载器 Java 类的类加载器。因为类加载器 Java 类如同其它的 Java 类一样，也是要由类加载器来加载的。一般来说，开发人员编写的类加载器的父类加载器是系统类加载器。类加载器通过这种方式组织起来，形成树状结构。树的根节点就是引导类加载器。图 1中给出了一个典型的类加载器树状组织结构示意图，其中的箭头指向的是父类加载器。<br><img src="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/image001.jpg" alt="" title="类加载器的树状结构"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ClassLoaderTree &#123; </span><br><span class="line">   public static void main(String[]() args) &#123; </span><br><span class="line">       ClassLoader loader = ClassLoaderTree.class.getClassLoader(); </span><br><span class="line">       while (loader != null) &#123; </span><br><span class="line">           System.out.println(loader.toString()); </span><br><span class="line">           loader = loader.getParent(); </span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类加载器的基本概念&quot;&gt;&lt;a href=&quot;#类加载器的基本概念&quot; class=&quot;headerlink&quot; title=&quot;类加载器的基本概念&quot;&gt;&lt;/a&gt;类加载器的基本概念&lt;/h2&gt;&lt;p&gt;顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例。&lt;br&gt;
    
    </summary>
    
      <category term="programming" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JAVA GC</title>
    <link href="http://yoursite.com/2016/11/22/JAVA-GC/"/>
    <id>http://yoursite.com/2016/11/22/JAVA-GC/</id>
    <published>2016-11-22T13:33:00.000Z</published>
    <updated>2018-09-08T09:37:44.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跟踪进度：统计和目标"><a href="#跟踪进度：统计和目标" class="headerlink" title="跟踪进度：统计和目标"></a>跟踪进度：统计和目标</h2><p>您是否看到了工具栏中的控制板按钮？它显示详细的文本统计，例如字符数、词数和页数，甚至是平均阅读时间。您还可以定制显示的统计量：只需打开面板，点按齿轮图标即可。</p><p>通过写作目标，您可以就特定词或字符限制跟踪进度，或者甚至针对特定阅读时间。此文稿的目标是“最多 300 个字符”–打开附件栏显示它。现在输入一些词。看到了吗？ </p><p>目标可以灵活设置，满足您的需求。试试吧：点按弹出窗口中的相应字段，将目标设置为“大约 150 个词”。</p><p>您还可以通过两点钟方位的“分享”图标将进度分享到社交媒体上。</p><p>提示： 统计和目标也可以通过其上下文菜单用于整个组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跟踪进度：统计和目标&quot;&gt;&lt;a href=&quot;#跟踪进度：统计和目标&quot; class=&quot;headerlink&quot; title=&quot;跟踪进度：统计和目标&quot;&gt;&lt;/a&gt;跟踪进度：统计和目标&lt;/h2&gt;&lt;p&gt;您是否看到了工具栏中的控制板按钮？它显示详细的文本统计，例如字符数、词数和页
      
    
    </summary>
    
      <category term="programming" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2016/09/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/09/08/设计模式/</id>
    <published>2016-09-08T08:13:45.000Z</published>
    <updated>2018-09-08T09:43:02.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跟踪进度：统计和目标"><a href="#跟踪进度：统计和目标" class="headerlink" title="跟踪进度：统计和目标"></a>跟踪进度：统计和目标</h2><p>您是否看到了工具栏中的控制板按钮？它显示详细的文本统计，例如字符数、词数和页数，甚至是平均阅读时间。您还可以定制显示的统计量：只需打开面板，点按齿轮图标即可。<br><a id="more"></a></p><p>通过写作目标，您可以就特定词或字符限制跟踪进度，或者甚至针对特定阅读时间。此文稿的目标是“最多 300 个字符”–打开附件栏显示它。现在输入一些词。看到了吗？ </p><p>目标可以灵活设置，满足您的需求。试试吧：点按弹出窗口中的相应字段，将目标设置为“大约 150 个词”。</p><p>您还可以通过两点钟方位的“分享”图标将进度分享到社交媒体上。</p><p>提示： 统计和目标也可以通过其上下文菜单用于整个组。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跟踪进度：统计和目标&quot;&gt;&lt;a href=&quot;#跟踪进度：统计和目标&quot; class=&quot;headerlink&quot; title=&quot;跟踪进度：统计和目标&quot;&gt;&lt;/a&gt;跟踪进度：统计和目标&lt;/h2&gt;&lt;p&gt;您是否看到了工具栏中的控制板按钮？它显示详细的文本统计，例如字符数、词数和页数，甚至是平均阅读时间。您还可以定制显示的统计量：只需打开面板，点按齿轮图标即可。&lt;br&gt;
    
    </summary>
    
      <category term="programming" scheme="http://yoursite.com/categories/programming/"/>
    
    
  </entry>
  
</feed>
